{"version":3,"sources":["components/header.js","components/note.js","components/footer.js","components/CreateArea.js","container/App.js","serviceWorker.js","index.js"],"names":["header","className","style","cursor","fontSize","Note","props","title","content","onClick","del","id","year","Date","getFullYear","footer","backgroundColor","CreateArea","useState","note","updateNote","isExpanded","setExpanded","update","event","preventDefault","target","value","name","preVal","onChange","placeholder","rows","Zoom","in","Fab","type","add","App","notes","setNotes","deleteNote","filter","index","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAWeA,EARA,WACd,OACC,4BAAQC,UAAU,eAChB,wBAAIC,MAAO,CAACC,OAAO,YAAnB,SAAqC,kBAAC,IAAD,CAAoBD,MAAO,CAACE,SAAS,YAA1E,Q,iBCYWC,MAff,SAAcC,GACZ,OACE,yBAAKL,UAAU,QACb,4BAAKK,EAAMC,OACX,2BAAID,EAAME,SACV,4BACAC,QAAS,WACPH,EAAMI,IAAIJ,EAAMK,MAFlB,IAIE,kBAAC,IAAD,SCRJC,GADK,IAAIC,MACAC,cAUEC,MARf,WACC,OACC,4BAAQb,MAAO,CAACc,gBAAgB,eAAef,UAAU,eACxD,+CAAgBW,EAAhB,IAAsB,6BAAtB,oB,iDCiDYK,MArDf,SAAoBX,GAAQ,IAAD,EAEIY,mBAAS,CACpCX,MAAM,GACNC,QAAQ,KAJe,mBAElBW,EAFkB,KAEXC,EAFW,OAOUF,oBAAS,GAPnB,mBAOlBG,EAPkB,KAOLC,EAPK,KASnBC,EAAS,SAACC,GACdA,EAAMC,iBADiB,MAEDD,EAAME,OAArBC,EAFgB,EAEhBA,MAAOC,EAFS,EAETA,KACdR,GAAW,SAAAS,GACT,OAAO,YAAC,eACHA,GADL,kBAEGD,EAAMD,QASb,OACE,6BACE,0BAAM1B,UAAU,eACboB,GAAc,2BACfO,KAAK,QACLD,MAAOR,EAAKZ,MACZuB,SAAUP,EACVQ,YAAY,oBACZ,8BACAH,KAAK,UACLD,MAAOR,EAAKX,QACZsB,SAAUP,EACVd,QAhBS,WACba,GAAY,IAgBRS,YAAY,iBAAiBC,KAAMX,EAAW,IAAI,MAClD,kBAACY,EAAA,EAAD,CAAMC,GAAIb,GAAY,kBAACc,EAAA,EAAD,CACtBC,KAAK,SACL3B,QAAW,WACTH,EAAM+B,IAAIlB,GACVC,EAAW,CACTb,MAAM,GACNC,QAAQ,OAGX,kBAAC,IAAD,WCCM8B,MA9Cf,WAAgB,IAAD,EAEepB,mBAAS,IAFxB,mBAENqB,EAFM,KAEEC,EAFF,KAiBPC,EAAa,SAAC9B,GAClB6B,GAAS,SAAAX,GACP,OAAOA,EAAOa,QAAO,SAACH,EAAMI,GAC1B,OAAOA,IAAQhC,SAKrB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACA0B,IAvBY,SAAClB,GACfqB,GAAS,SAAAX,GACP,MAAM,GAAN,mBAEOA,GAFP,CAGIV,UAoBHoB,EAAMK,KAAI,SAACzB,EAAKwB,GACf,OAAO,kBAAC,EAAD,CAAME,IAAKF,EAChBhC,GAAIgC,EACJpC,MAAOY,EAAKZ,MACZC,QAASW,EAAKX,QACdE,IAAK+B,OAGT,6BACA,kBAAC,EAAD,QCnCcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c89a0ea6.chunk.js","sourcesContent":["import React from 'react';\r\nimport ImportContactsIcon from '@material-ui/icons/ImportContacts';\r\n\r\nconst header = () => {\r\n\treturn (\r\n\t\t<header className=\"nav-wrapper\">\r\n\t\t\t\t<h1 style={{cursor:\"pointer\"}}> Noteb<ImportContactsIcon style={{fontSize:\"1.8rem\"}}/>k </h1>\r\n\t\t\t</header>\r\n\t\t);\r\n}\r\n\r\nexport default header;","import React from \"react\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nfunction Note(props) {\r\n  return (\r\n    <div className=\"note\">\r\n      <h1>{props.title}</h1>\r\n      <p>{props.content}</p>\r\n      <button\r\n      onClick={()=>{\r\n        props.del(props.id)\r\n      }}\r\n      > <DeleteIcon />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Note;\r\n\r\n\r\n//\r\n","import React from 'react';\r\n\r\n\r\nlet d =  new Date();\r\nlet year = d.getFullYear();\r\n\r\nfunction footer () {\r\n\treturn (\r\n\t\t<footer style={{backgroundColor:\"transparent\"}}className=\"page-footer\">\r\n\t\t\t<p>Copyright â“’ {year} <br></br> Created by A8</p>\r\n\t\t</footer>\t\r\n\t\t);\r\n}\r\n\r\nexport default footer;","import React,{useState} from \"react\";\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Zoom from '@material-ui/core/Zoom';\r\n\r\nfunction CreateArea(props) {\r\n\r\n  const [note , updateNote ] = useState({\r\n    title:\"\",\r\n    content:\"\"\r\n  })\r\n\r\n  const [isExpanded , setExpanded] = useState(false);\r\n\r\n  const update = (event) =>{\r\n    event.preventDefault();\r\n    const {value, name} = event.target;\r\n    updateNote(preVal=>{\r\n      return ({\r\n        ...preVal,\r\n        [name]:value\r\n      });\r\n    });\r\n  }\r\n\r\n  const expand = () =>{\r\n    setExpanded(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"create-note\">\r\n        {isExpanded && <input \r\n        name=\"title\" \r\n        value={note.title} \r\n        onChange={update}\r\n        placeholder=\"Give it a Title\"></input>}\r\n        <textarea \r\n        name=\"content\" \r\n        value={note.content} \r\n        onChange={update}\r\n        onClick={expand}\r\n        placeholder=\"Take a note...\" rows={isExpanded?\"3\":\"1\"}></textarea>\r\n        <Zoom in={isExpanded}><Fab\r\n        type=\"button\"\r\n        onClick = {()=>{\r\n          props.add(note);\r\n          updateNote({\r\n            title:\"\",\r\n            content:\"\"\r\n          }); \r\n        }}\r\n        ><NoteAddIcon /></Fab></Zoom>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateArea;\r\n\r\n\r\n//","import React,{useState} from 'react';\r\nimport Header from '../components/header';\r\nimport Note from '../components/note';\r\nimport Footer from '../components/footer';\r\nimport CreateArea from \"../components/CreateArea\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const [notes , setNotes ] = useState([])\r\n\r\n  \r\n  \r\n  const addItem = (note) =>{\r\n    setNotes(preVal=>{\r\n      return(\r\n        [\r\n          ...preVal,\r\n          note\r\n        ]\r\n      );\r\n    });\r\n  }\r\n\r\n  const deleteNote = (id) =>{\r\n    setNotes(preVal=>{\r\n      return preVal.filter((notes,index)=>{\r\n        return index!==id \r\n      })\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <CreateArea\r\n      add={addItem}\r\n      />\r\n      {notes.map((note,index)=>{\r\n        return(<Note key={index} \r\n          id={index}\r\n          title={note.title} \r\n          content={note.content} \r\n          del={deleteNote}\r\n          />);\r\n      })}\r\n      <br></br>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}